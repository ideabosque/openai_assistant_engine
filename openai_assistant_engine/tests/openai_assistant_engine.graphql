fragment AskOpenAIInfo on AskOpenAIType {
    assistantId
    threadId
    userQuery
    functionName
    taskUuid
    currentRunId
}

fragment LiveMessageInfo on LiveMessageType {
    threadId
    runId
    messageId
    role
    message
    createdAt
}

fragment OpenAIFileInfo on OpenAIFileType {
    id
    object
    bytes
    createdAt
    filename
    purpose
}

fragment CurrentRunInfo on CurrentRunType {
    threadId
    runId
    status
    usage
}

fragment AssistantInfo on AssistantType {
    assistantType
    assistantId
    assistantName
    description
    model
    instructions
    metadata
    temperature
    topP
    responseFormat
    tools
    toolResources
    configuration
    functions
    updatedBy
    createdAt
    updatedAt
}

fragment AssistantListInfo on AssistantListType {
    assistantList{
        ...AssistantInfo
    }
    pageSize
    pageNumber
    total
}

fragment ThreadInfo on ThreadType {
    assistant
    threadId
    runs
    updatedBy
    createdAt
    updatedBy
}

fragment ThreadListInfo on ThreadListType {
    threadList{
        ...ThreadInfo
    }
    pageSize
    pageNumber
    total
}

fragment MessageInfo on MessageType {
    threadId
    runId
    messageId
    role
    message
    createdAt
}

fragment MessageListInfo on MessageListType {
    messageList{
        ...MessageInfo
    }
    pageSize
    pageNumber
    total
}

fragment ToolCallInfo on ToolCallType {
    runId
    toolCallId
    toolType
    name
    arguments
    content
    createdAt
}

fragment ToolCallListInfo on ToolCallListType {
    toolCallList{
        ...ToolCallInfo
    }
    pageSize
    pageNumber
    total
}

fragment FineTuningMessageInfo on FineTuningMessageType {
    thread
    messageUuid
    timestamp
    role
    toolCalls
    toolCallId
    content
    weight
    trained
}

fragment FineTuningMessageListInfo on FineTuningMessageListType {
    fineTuningMessageList{
        ...FineTuningMessageInfo
    }
    pageSize
    pageNumber
    total
}

fragment AsyncTaskInfo on AsyncTaskType {
    functionName
    taskUuid
    arguments
    status
    result
    log
    createdAt
    updatedAt
}

fragment AsyncTaskListInfo on AsyncTaskListType {
    asyncTaskList{
        ...AsyncTaskInfo
    }
    pageSize
    pageNumber
    total
}

query ping {
    ping
}

query askOpenAi(
    $assistantType: String!,
    $assistantId: String!,
    $instructions: String,
    $attachments: [JSON],
    $toolResources: JSON,
    $threadMetadata: JSON,
    $messageMetadata: JSON,
    $userQuery: String!,
    $updatedBy: String!,
    $threadId: String
) {
    askOpenAi(
        assistantType: $assistantType,
        assistantId: $assistantId,
        instructions: $instructions,
        attachments: $attachments,
        toolResources: $toolResources,
        threadMetadata: $threadMetadata,
        messageMetadata: $messageMetadata,
        userQuery: $userQuery,
        updatedBy: $updatedBy,
        threadId: $threadId
    ) {
        ...AskOpenAIInfo
    }
}

query getLastMessage(
    $assistantId: String,
    $threadId: String!,
    $role: String!
) {
    lastMessage(
        assistantId: $assistantId,
        threadId: $threadId,
        role: $role
    ){
        ...LiveMessageInfo
    }
}

query getLiveMessages(
    $threadId: String!,
    $roles: [String],
    $order: String
) {
    liveMessages(
        threadId: $threadId,
        roles: $roles,
        order: $order
    ){
        ...LiveMessageInfo
    }
}

query getCurrentRun(
    $functionName: String!,
    $taskUuid: String!,
    $assistantId: String!,
    $threadId: String!,
    $runId: String!,
    $updatedBy: String!
) {
    currentRun(
        functionName: $functionName,
        taskUuid: $taskUuid,
        assistantId: $assistantId,
        threadId: $threadId,
        runId: $runId,
        updatedBy: $updatedBy
    ){
        ...CurrentRunInfo
    }
}

query getFile(
    $fileId: String!
) {
    file(
        fileId: $fileId
    ) {
        ...OpenAIFileInfo
    }
}

query getFileContent(
    $fileId: String!
) {
    file(
        fileId: $fileId
    ) {
        id
        object
        bytes
        createdAt
        filename
        purpose
        encodedContent
    }
}

query getFiles(
    $purpose: String
) {
    files(
        purpose: $purpose
    ) {
        ...OpenAIFileInfo
    }
}

mutation insertFile(
    $filename: String!,
    $encodedContent: String!,
    $purpose: String!
) {
    insertFile(
        filename: $filename,
        encodedContent: $encodedContent,
        purpose: $purpose
    ) {
        file{
            ...OpenAIFileInfo
        }
    }
}

mutation deleteFile(
    $fileId: String!
) {
    deleteFile(
        fileId: $fileId
    ) {
        ok
    }
}

query getAssistant(
    $assistantType: String!,
    $assistantId: String!
) {
    assistant(
        assistantType: $assistantType,
        assistantId: $assistantId
    ) {
        ...AssistantInfo
    }
}

query getAssistantList(
    $pageNumber: Int, 
    $limit: Int,
    $assistantType: String,
    $assistantName: String
) {
    assistantList(
        pageNumber: $pageNumber,
        limit: $limit,
        assistantType: $assistantType,
        assistantName: $assistantName
    ) {
        ...AssistantListInfo
    }
}

mutation insertUpdateAssistant(
    $assistantType: String!,
    $assistantId: String,
    $assistantName: String!,
    $description: String,
    $model: String!,
    $instructions: String!,
    $tools: [JSON],
    $toolResources: JSON,
    $metadata: JSON,
    $temperature: Float,
    $topP: Float,
    $responseFormat: String,
    $configuration: JSON!,
    $functions: [JSON]!,
    $updatedBy: String!
) {
    insertUpdateAssistant(
        assistantType: $assistantType,
        assistantId: $assistantId,
        assistantName: $assistantName,
        description: $description,
        model: $model,
        instructions: $instructions,
        tools: $tools,
        toolResources: $toolResources,
        metadata: $metadata,
        temperature: $temperature,
        topP: $topP,
        responseFormat: $responseFormat,
        configuration: $configuration,
        functions: $functions,
        updatedBy: $updatedBy
    ) {
        assistant{
            ...AssistantInfo
        }
    }
}

mutation deleteAssistant(
    $assistantType: String!,
    $assistantId: String!
) {
    deleteAssistant(
        assistantType: $assistantType,
        assistantId: $assistantId
    ) {
        ok
    }
}

query getThread(
    $assistantId: String!,
    $threadId: String!
) {
    thread(
        assistantId: $assistantId,
        threadId: $threadId
    ) {
        ...ThreadInfo
    }
}

query getThreadList(
    $pageNumber: Int, 
    $limit: Int,
    $assistantId: String,
    $assistantTypes: [String]
) {
    threadList(
        pageNumber: $pageNumber,
        limit: $limit,
        assistantId: $assistantId,
        assistantTypes: $assistantTypes
    ) {
        ...ThreadListInfo
    }
}

mutation insertUpdateThread(
    $assistantId: String!,
    $threadId: String!,
    $assistantType: String!,
    $run: JSON,
    $updatedBy: String!
) {
    insertUpdateThread(
        assistantId: $assistantId,
        threadId: $threadId,
        assistantType: $assistantType,
        run: $run,
        updatedBy: $updatedBy
    ) {
        thread{
            ...ThreadInfo
        }
    }
}

mutation deleteThread(
    $assistantId: String!,
    $threadId: String!
) {
    deleteThread(
        assistantId: $assistantId,
        threadId: $threadId
    ) {
        ok
    }
}

query getMessage(
    $threadId: String!,
    $messageId: String!
) {
    message(
        threadId: $threadId,
        messageId: $messageId
    ) {
        ...MessageInfo
    }
}

query getMessageList(
    $pageNumber: Int, 
    $limit: Int,
    $threadId: String,
    $roles: [String],
    $message: String
) {
    messageList(
        pageNumber: $pageNumber,
        limit: $limit,
        threadId: $threadId,
        roles: $roles,
        message: $message
    ) {
        ...MessageListInfo
    }
}

mutation insertUpdateMessage(
    $threadId: String!,
    $messageId: String!,
    $runId: String!,
    $role: String!,
    $message: String!,
    $createdAt: DateTime!
) {
    insertUpdateMessage(
        threadId: $threadId,
        messageId: $messageId,
        runId: $runId,
        role: $role,
        message: $message,
        createdAt: $createdAt
    ) {
        message{
            ...MessageInfo
        }
    }
}

mutation deleteMessage(
    $threadId: String!,
    $messageId: String!
) {
    deleteMessage(
        threadId: $threadId,
        messageId: $messageId
    ) {
        ok
    }
}

query getToolCall(
    $runId: String!,
    $toolCallId: String!
) {
    toolCall(
        runId: $runId,
        toolCallId: $toolCallId
    ) {
        ...ToolCallInfo
    }
}

query getToolCallList(
    $pageNumber: Int, 
    $limit: Int,
    $runId: String,
    $toolTypes: [String],
    $name: String
) {
    toolCallList(
        pageNumber: $pageNumber,
        limit: $limit,
        runId: $runId,
        toolTypes: $toolTypes,
        name: $name
    ) {
        ...ToolCallListInfo
    }
}

mutation insertUpdateToolCall(
    $runId: String!,
    $toolCallId: String!,
    $toolType: String!,
    $name: String!,
    $arguments: JSON!,
    $content: String,
    $createdAt: DateTime!
) {
    insertUpdateToolCall(
        runId: $runId,
        toolCallId: $toolCallId,
        toolType: $toolType,
        name: $name,
        arguments: $arguments,
        content: $content,
        createdAt: $createdAt
    ) {
        toolCall{
            ...ToolCallInfo
        }
    }
}

mutation deleteToolCall(
    $runId: String!,
    $toolCallId: String!
) {
    deleteToolCall(
        runId: $runId,
        toolCallId: $toolCallId
    ) {
        ok
    }
}

query getFineTuningMessage(
    $assistantId: String!,
    $messageUuid: String!
) {
    fineTuningMessage(
        assistantId: $assistantId,
        messageUuid: $messageUuid
    ) {
        ...FineTuningMessageInfo
    }
}

query getFineTuningMessageList(
    $pageNumber: Int, 
    $limit: Int,
    $assistantId: String,
    $threadId: String,
    $roles: [String],
    $trained: Boolean,
    $timestamp: Int
) {
    fineTuningMessageList(
        pageNumber: $pageNumber,
        limit: $limit,
        assistantId: $assistantId,
        threadId: $threadId,
        roles: $roles,
        trained: $trained,
        timestamp: $timestamp
    ) {
        ...FineTuningMessageListInfo
    }
}

mutation insertUpdateFineTuningMessages(
    $assistantType: String,
    $assistantId: String,
    $retrain: Boolean,
    $trainedMessageUuids: [String],
    $weightupMessageUuids: [String],
    $weightdownMessageUuids: [String]
) {
    insertUpdateFineTuningMessages(
        assistantType: $assistantType,
        assistantId: $assistantId,
        retrain: $retrain,
        trainedMessageUuids: $trainedMessageUuids,
        weightupMessageUuids: $weightupMessageUuids,
        weightdownMessageUuids: $weightdownMessageUuids
    ) {
        asyncTask{
            functionName
            taskUuid
        }
    }
}

mutation insertUpdateFineTuningMessage(
    $assistantId: String!,
    $messageUuid: String,
    $threadId: String!,
    $timestamp: Int!,
    $role: String!,
    $toolCalls: [JSON],
    $toolCallId: String,
    $content: String,
    $weight: Float,
    $trained: Boolean
) {
    insertUpdateFineTuningMessage(
        assistantId: $assistantId,
        messageUuid: $messageUuid,
        threadId: $threadId,
        timestamp: $timestamp,
        role: $role,
        toolCalls: $toolCalls,
        toolCallId: $toolCallId,
        content: $content,
        weight: $weight,
        trained: $trained
    ) {
        fineTuningMessage{
            ...FineTuningMessageInfo
        }
    }
}

mutation deleteFineTuningMessage(
    $assistantId: String!,
    $messageUuid: String!
) {
    deleteFineTuningMessage(
        assistantId: $assistantId,
        messageUuid: $messageUuid
    ) {
        ok
    }
}

query getAsyncTask(
    $functionName: String!,
    $taskUuid: String!
) {
    asyncTask(
        functionName: $functionName,
        taskUuid: $taskUuid
    ) {
        ...AsyncTaskInfo
    }
}

query getAsyncTaskList(
    $pageNumber: Int, 
    $limit: Int,
    $functionName: String,
    $statuses: [String]
) {
    asyncTaskList(
        pageNumber: $pageNumber,
        limit: $limit,
        functionName: $functionName,
        statuses: $statuses
    ) {
        ...AsyncTaskListInfo
    }
}

mutation insertUpdateAsyncTask(
    $functionName: String!,
    $taskUuid: String!,
    $arguments: JSON,
    $status: String,
    $result: String,
    $log: String
) {
    insertUpdateAsyncTask(
        functionName: $functionName,
        taskUuid: $taskUuid,
        arguments: $arguments,
        status: $status,
        result: $result,
        log: $log
    ) {
        asyncTask{
            ...AsyncTaskInfo
        }
    }
}

mutation deleteAsyncTask(
    $functionName: String!,
    $taskUuid: String!
) {
    deleteAsyncTask(
        functionName: $functionName,
        taskUuid: $taskUuid
    ) {
        ok
    }
}